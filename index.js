import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";
import fs from "fs";

import { sendDataAboutError } from "./tgterminal.js";
import { sendDataAboutText } from "./tgterminal.js";

const TOKENs = [
	"6654105779:AAEnCdIzKS_cgJUg4rMY8yNM3LPP5iZ-d_A",
	"7013930192:AAGZWxSUCdJTYBoFtBguQ-qaFCLPNDN5q_k",
];

const TOKEN = TOKENs[1]; // 1 - –æ—Ä–∏–≥–∏–Ω–∞–ª
const bot = new TelegramBot(TOKEN, { polling: true });

const qu1z3xId = "923690530";
const stepanovId = "5786876945";
const jackId = "6815420098";
let BotName = "sch27masterclass";

//? –ú–ê–°–°–ò–í–´ –î–ê–ù–ù–´–•

let usersData = [];

let textMessageForAllUsers = "",
	match = null;

bot.setMyCommands([
	{
		command: "/restart",
		description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ üëæ",
	},
]);

//? –§–£–ù–ö–¶–ò–ò

async function firstMeeting(chatId, numOfStage = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		switch (numOfStage) {
			case 1:
				dataAboutUser.userAction = "firstMeeting1";

				await bot
					.sendMessage(chatId, "„Ö§")
					.then(
						(message) => (dataAboutUser.messageId = message.message_id)
					);

				await bot.editMessageText(
					`–ü—Ä–∏–≤–µ—Ç! –Ø <B>–û–ø—Ä–æ—Å–Ω–∏—á–æ–∫!</B>üëã\n–Ø —É—Å—Ç—Ä–∞–∏–≤–∞—é <i>—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ</i> <B>–æ–ø—Ä–æ—Å—ã –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤!</B> üòä\n\n–°–µ–≥–æ–¥–Ω—è <B>—Ç–µ–±–µ</B> –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –æ —Ç–æ–º, <B>–∫–∞–∫ —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å —Å–≤–æ–π –¥–µ–Ω—å!</B> üòâ\n\n–ü—Ä–æ—Å—å–±–∞ <B>–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ</B> —á–∏—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ <b>–ø—Ä–∞–≤–∏–ª—å–Ω–æ</b> –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö‚ùó`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "–ü–æ–µ—Ö–∞–ª–∏! üëç",
										callback_data: "firstMeeting2",
									},
								],
							],
						},
					}
				);
				break;
			case 2:
				dataAboutUser.userAction = "firstMeeting2";
				await bot.editMessageText(
					`–¢–µ–ø–µ—Ä—å —Ç—ã –∑–Ω–∞–µ—à—å –º–µ–Ω—è, <b>–∞ —è —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç!</b> ü§î\n\n–ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ <B>–Ω–∏–∂–µ, —Å–≤–æ–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è! \n\n–ü—Ä–∏–º–µ—Ä:</B>  <code>–ï—Ñ—Ä–µ–º–æ–≤ –í–∞—Å—è</code>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
					}
				);
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, `${String(error)}`);
	}
}

async function Questions(chatId, numOfStage = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		switch (numOfStage) {
			case 1:
				dataAboutUser.userAction = `Questions1`;

				// [name1, name2] = dataAboutUser.fullName.split(" ");

				await bot.editMessageText(
					`<b><i>–í–æ–ø—Ä–æ—Å ${numOfStage} / 10</i>\n\n${dataAboutUser.fullName},</b> –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üòÉ\n\n–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å!\n<b><I>–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è? ü§î</I>\n\n–ü—Ä–∏–º–µ—Ä: <code>–≤ 7:30</code></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
					}
				);

				break;
			case 2:
				dataAboutUser.userAction = `Questions2`;

				await bot.editMessageText(
					`<b><i>–í–æ–ø—Ä–æ—Å ${numOfStage} / 10</i></b>\n\n–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! üëç\n\n<b><I>–î–µ–ª–∞–µ—à—å –ª–∏ —Ç—ã –∑–∞—Ä—è–¥–∫—É –ø–æ —É—Ç—Ä–∞–º? ü§î</I></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "–î–µ–ª–∞—é ‚úÖ",
										callback_data: `yesOnQuestion${numOfStage}`,
									},
									{
										text: "–ù–µ –¥–µ–ª–∞—é ‚ùå",
										callback_data: `noOnQuestion${numOfStage}`,
									},
								],
							],
						},
					}
				);

				break;
			case 3:
				dataAboutUser.userAction = `Questions3`;

				await bot.editMessageText(
					`<b><i>–í–æ–ø—Ä–æ—Å ${numOfStage} / 10</i></b>\n\n–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏..\n\n<b><I>–°–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —É —Ç–µ–±—è –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ—Ä–æ–≥–∞ –≤ —à–∫–æ–ª—É? ü§î</I>\n\n–ü—Ä–∏–º–µ—Ä: <code>10 –º–∏–Ω—É—Ç</code></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
					}
				);
				break;
			case 4:
				dataAboutUser.userAction = `Questions4`;

				await bot.editMessageText(
					`<b><i>–í–æ–ø—Ä–æ—Å ${numOfStage} / 10</i></b>\n\n–ö–ª–∞—Å—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π! üòÅ\n\n<b><I>–ê –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–æ–ª–≥–æ —Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—à—å –î/–ó? ü§î</I>\n\n–ü—Ä–∏–º–µ—Ä: <code>3 —á–∞—Å–∞</code></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
					}
				);
				break;
			case 5:
				dataAboutUser.userAction = `Questions5`;

				await bot.editMessageText(
					`<b><i>–í–æ–ø—Ä–æ—Å ${numOfStage} / 10</i></b>\n\n–ú–æ–ª–æ–¥–µ—Ü! –°–µ–π—á–∞—Å —Ö–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å..\n\n<b><I>–í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞–µ—à—å –∫ —É—Ä–æ–∫–∞–º? ü§î</I>\n\n–ü—Ä–∏–º–µ—Ä: <code>–≤ 15:30</code></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
					}
				);
				break;
			case 6:
				dataAboutUser.userAction = `Questions6`;

				await bot.editMessageText(
					`<b><i>–í–æ–ø—Ä–æ—Å ${numOfStage} / 10</i></b>\n\n–°—É–ø–µ—Ä, —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å..\n\n<b><I>–•–æ–¥–∏—à—å –ª–∏ —Ç—ã –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –∏–ª–∏ –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º? ü§î</I></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "–•–æ–∂—É ‚úÖ",
										callback_data: `yesOnQuestion${numOfStage}`,
									},
									{
										text: "–ù–µ –Ω—É–∂–Ω–æ ‚ùå",
										callback_data: `noOnQuestion${numOfStage}`,
									},
								],
							],
						},
					}
				);
				break;
			case 7:
				dataAboutUser.userAction = `Questions7`;

				await bot.editMessageText(
					`<b><i>–í–æ–ø—Ä–æ—Å ${numOfStage} / 10</i></b>\n\n–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! üëç\n\n<b><I>–¢—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏? ü§î</I></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "–ó–∞–Ω–∏–º–∞—é—Å—å ‚úÖ",
										callback_data: `yesOnQuestion${numOfStage}`,
									},
									{
										text: "–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ‚ùå",
										callback_data: `noOnQuestion${numOfStage}`,
									},
								],
							],
						},
					}
				);
				break;
			case 8:
				dataAboutUser.userAction = `Questions8`;

				await bot.editMessageText(
					`<b><i>–í–æ–ø—Ä–æ—Å ${numOfStage} / 10</i></b>\n\n–£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è! üòÅ\n\n<b><I>–¢—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ—à—å—Å—è —Ä–µ–∂–∏–º–∞ –¥–Ω—è? ü§î</I></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "–ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—é—Å—å ‚úÖ",
										callback_data: `yesOnQuestion${numOfStage}`,
									},
									{
										text: "–ù–µ —Ö–æ—á—É ‚ùå",
										callback_data: `noOnQuestion${numOfStage}`,
									},
								],
							],
						},
					}
				);
				break;
			case 9:
				dataAboutUser.userAction = `Questions9`;

				await bot.editMessageText(
					`<b><i>–í–æ–ø—Ä–æ—Å ${numOfStage} / 10</i></b>\n\n–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å! üòâ\n\n<b><I>–ê –≤–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å? ü§î</I>\n\n–ü—Ä–∏–º–µ—Ä: <code>–≤ 21:40</code></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
					}
				);
				break;
			case 10:
				dataAboutUser.userAction = `Questions10`;

				await bot.editMessageText(
					`<b><i>–í–æ–ø—Ä–æ—Å ${numOfStage} / 10</i></b>\n\n–ò–∏–∏... –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üòÉ\n\n<b><I>–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–µ–Ω—å —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º? ü§î</I>\n\n–ü—Ä–∏–º–µ—Ä: <code>5 —á–∞—Å–æ–≤</code></b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
					}
				);

				break;
			case 11:
				dataAboutUser.userAction = "";
				if (chatId != qu1z3xId && chatId != stepanovId) {
					dataAboutUser.questionnaireIsOver = true;
				}

				await bot.editMessageText(
					`<i>–û–ø—Ä–æ—Å <b>—É—Å–ø–µ—à–Ω–æ</b> –ø—Ä–æ–π–¥–µ–Ω! ‚úÖ</i>\n\n<b>${dataAboutUser.fullName},\n–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! </b>üòÅ\n\n<i>–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å <b>–æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª –±—ã,</b> —á—Ç–æ–±—ã <B>–≤–∞—à –∫–ª–∞—Å—Å</B> –æ—Ü–µ–Ω–∏–ª –µ–≥–æ –∫—Ä—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã! üëáüòÅ</i>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "–¶–∏—Ñ—Ä–æ–≤–∏—á–æ–∫ ü§ñ",
										url: "https://t.me/digschbot",
									},
									{
										text: "–°–ø–æ—Ä—Ç–∏–≤–∏—á–æ–∫ üèÄ",
										url: "https://t.me/digjudgebot",
									},
								],
							],
						},
					}
				);
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, `${String(error)}`);
	}
}

async function dataLists(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	let text = "";

	try {
		if (!usersData.find((obj) => obj.questionnaireIsOver)) {
			text = "–ü–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ üèùÔ∏è";
		}
		for (let i = 0; i < usersData.length; i++) {
			if (usersData[i].questionnaireIsOver) {
				text += `[${i + 1}] ${usersData[i].fullName}\n–ü–æ–¥—ä–µ–º: ${
					usersData[i].timeToWakeUp
				}, –ó–∞—Ä—è–¥–∫–∞: ${
					usersData[i].doMorningWorkout ? "–ï—Å—Ç—å ‚úÖ" : "–ù–µ—Ç ‚ùå"
				}\n–í—Ä–µ–º—è –¥–æ —à–∫–æ–ª—ã: ${usersData[i].timeForGoToSchool}\n–î–æ–º–∞—à–∫–∞: ${
					usersData[i].timeToDoHomework
				}, –ø–æ ${usersData[i].timeForHomework}\n–†–µ–ø–µ—Ç–∏—Ç–æ—Ä: ${
					usersData[i].visitAdditionalTeacher ? "–ï—Å—Ç—å ‚úÖ" : "–ù–µ—Ç‚ùå"
				}, –°–ø–æ—Ä—Ç-—Å–µ–∫—Ü–∏–∏: ${
					usersData[i].visitSportSection ? "–ï—Å—Ç—å ‚úÖ" : "–ù–µ—Ç ‚ùå"
				}\n–†—É—Ç–∏–Ω–∞: ${
					usersData[i].observeDailyRoutine ? "–ï—Å—Ç—å ‚úÖ" : "–ù–µ—Ç ‚ùå"
				}, –û—Ç—Ö–æ–¥ –∫–æ —Å–Ω—É: ${usersData[i].timeToSleep}\n–í—Ä–µ–º—è –∑–∞ —ç–∫—Ä–∞–Ω–æ–º: ${
					usersData[i].screenTime
				}`;
			}
		}

		fs.writeFile("dataAboutStudents.txt", text, (err) => {
			if (err) throw err;

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			bot.sendDocument(chatId, "./dataAboutStudents.txt", {
				caption: "–î–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö",
			}).then((message) => {
				dataAboutUser.messageIdOther = message.message_id;
			});
		});
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, `${String(error)}`);
	}
}

async function StartAll() {
	if (TOKEN == TOKENs[0]) {
		BotName = "digsch27_bot";
	} else if (TOKEN == TOKENs[1]) {
		BotName = "digformsbot";
	}

	try {
		bot.on("message", async (message) => {
			const chatId = message.chat.id;
			const text = message.text;
			let dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

			try {
				if (!dataAboutUser) {
					usersData.push({
						chatId: message.chat.id,
						messageId: "",
						messageIdOther: "",
						userAction: "",
						fullName: "",
						timeToWakeUp: null,
						doMorningWorkout: null,
						timeForGoToSchool: null,
						timeForHomework: null,
						timeToDoHomework: null,
						visitAdditionalTeacher: null,
						visitSportSection: null,
						observeDailyRoutine: null,
						timeToSleep: null,
						screenTime: null,
						questionnaireIsOver: false,
					});
				}

				if (usersData.find((obj) => obj.chatId == chatId)) {
					dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
					//? –ö–û–ú–ê–ù–î–´
					switch (text) {
						case "/start":
						case "/restart":
							if (dataAboutUser && !dataAboutUser.questionnaireIsOver) {
								try {
									await bot.deleteMessage(
										chatId,
										dataAboutUser.messageIdOther
									);
								} catch (error) {}
								firstMeeting(chatId);
							} else Questions(chatId, 11);
							break;
						case "/data":
							if (chatId == qu1z3xId || chatId == stepanovId) {
								dataLists(chatId);
							}
							break;
						case "":
							break;
						case "":
							break;
					}

					if (
						dataAboutUser.userAction.includes("Questions") &&
						!text.includes("/")
					) {
						match = dataAboutUser.userAction.match(/^Questions(\d+)$/);
						switch (parseInt(match[1])) {
							case 1:
								dataAboutUser.timeToWakeUp = text;
								Questions(chatId, 2);
								break;
							case 3:
								dataAboutUser.timeForGoToSchool = text;
								Questions(chatId, 4);
								break;
							case 4:
								dataAboutUser.timeForHomework = text;
								Questions(chatId, 5);
								break;
							case 5:
								dataAboutUser.timeToDoHomework = text;
								Questions(chatId, 6);
								break;
							case 9:
								dataAboutUser.timeToSleep = text;
								Questions(chatId, 10);
								break;
							case 10:
								dataAboutUser.screenTime = text;
								Questions(chatId, 11);
								break;
						}
					}

					if (
						dataAboutUser.userAction == "firstMeeting2" &&
						!text.includes("/")
					) {
						dataAboutUser.fullName = text;

						Questions(chatId, 1);
					}
				}

				bot.deleteMessage(chatId, message.message_id);

				if (chatId != qu1z3xId) {
					sendDataAboutText(
						message.from.first_name,
						message.from.username,
						message.chat.id,
						text
					);
				}
			} catch (error) {
				console.log(error);
				sendDataAboutError(chatId, `${String(error)}`);
			}
		});

		//? –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ê–í–ò–ê–¢–£–†–´ –ü–û–î –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò

		bot.on("callback_query", (query) => {
			const chatId = query.message.chat.id;
			const data = query.data;

			const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

			try {
				if (usersData.find((obj) => obj.chatId == chatId)) {
					if (data.includes("yesOnQuestion")) {
						let match = data.match(/^yesOnQuestion(\d+)$/);

						console.log(3);
						switch (parseInt(match[1])) {
							case 2:
								dataAboutUser.doMorningWorkout = true;
								Questions(chatId, 3);
								break;
							case 6:
								dataAboutUser.visitAdditionalTeacher = true;
								Questions(chatId, 7);
								break;
							case 7:
								dataAboutUser.visitSportSection = true;
								Questions(chatId, 8);
								break;
							case 8:
								dataAboutUser.observeDailyRoutine = true;
								Questions(chatId, 9);
								break;
						}
					} else if (data.includes("noOnQuestion")) {
						let match = data.match(/^noOnQuestion(\d+)$/);

						switch (parseInt(match[1])) {
							case 2:
								dataAboutUser.doMorningWorkout = false;
								Questions(chatId, 3);
								break;
							case 6:
								dataAboutUser.visitAdditionalTeacher = false;
								Questions(chatId, 7);
								break;
							case 7:
								dataAboutUser.visitSportSection = false;
								Questions(chatId, 8);
								break;
							case 8:
								dataAboutUser.observeDailyRoutine = false;
								Questions(chatId, 9);
								break;
						}
					}

					//? –ö–û–ú–ê–ù–î–´
					switch (data) {
						case "firstMeeting1":
							firstMeeting(chatId, 1);
							break;
						case "firstMeeting2":
							firstMeeting(chatId, 2);
							break;
						case "adminMenu":
							adminMenu(chatId);
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;

						default:
							break;
					}
				}
			} catch (error) {
				console.log(error);
				sendDataAboutError(chatId, `${String(error)}`);
			}
		});
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, `${String(error)}`);
	}
}

StartAll();
