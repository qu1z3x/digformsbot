import TelegramBot from "node-telegram-bot-api";
import cron from "node-cron";

import { initializeApp } from "firebase/app";
import { getDatabase, ref, set, get } from "firebase/database";

import { sendDataAboutButton } from "./tgterminal.js";
import { sendDataAboutError } from "./tgterminal.js";
import { sendDataAboutAction } from "./tgterminal.js";
import { chat_v1 } from "googleapis";

const TOKENs = [
	"6654105779:AAEnCdIzKS_cgJUg4rMY8yNM3LPP5iZ-d_A",
	"6742129950:AAF0x4esK6JxkuSVr2IoyHSVWA-7gKDmZ_U",
];

const TOKEN = TOKENs[1]; // 1 - –æ—Ä–∏–≥–∏–Ω–∞–ª
const bot = new TelegramBot(TOKEN, { polling: true });

const qu1z3xId = "923690530";
const stepanovId = "5786876945";
const jackId = "6815420098";
let BotName = "sch27masterclass";

//? –ú–ê–°–°–ò–í–´ –î–ê–ù–ù–´–•

let usersData = [];
let timeGroups = [
	{ time: "15:00", listedUsers: ["333"], maxCountOfSeats: 41 },
	{ time: "16:30", listedUsers: ["333"], maxCountOfSeats: 41 },
	{ time: "18:00", listedUsers: ["333"], maxCountOfSeats: 26 },
];
let masterClassFeedbacks = [];

const firebaseConfig = {
	apiKey: "AIzaSyBy6yyzbKDNXslvbMo51uJMiCpcuL4CnJE",
	authDomain: "digschraspisanie.firebaseapp.com",
	databaseURL: "https://digschraspisanie-default-rtdb.firebaseio.com",
	projectId: "digschraspisanie",
	storageBucket: "digschraspisanie.appspot.com",
	messagingSenderId: "831815158500",
	appId: "1:831815158500:web:3059c65379b4317ff33af1",
	measurementId: "G-9Z5EGQ2GBM",
};
const app = initializeApp(firebaseConfig);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Firebase Realtime Database
const db = getDatabase(app);
const dataRef = ref(db);

let textMessageForAllUsers = "";

bot.setMyCommands([
	{
		command: "/restart",
		description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫",
	},
]);

//? –§–£–ù–ö–¶–ò–ò

async function firstMeeting(chatId, meetingStage = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		switch (meetingStage) {
			case 1:
				dataAboutUser.userAction = "-";
				await bot.editMessageText(
					`<b>–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ú–ë–û–£ –°–û–® ‚Ññ27.</b>\n–í —Å–≤—è–∑–∏ —Å <b>—É—Å–∏–ª–µ–Ω–∏–µ–º –º–µ—Ä –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏,</b> –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ <b>–±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.</b> –¢–∞–∫-–∂–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç</b> –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å. \n–î–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã <b>–¥–≤–µ –¥–µ—Ç—Å–∫–∏–µ</b> –≥—Ä—É–ø–ø—ã –∏ <b>–æ–¥–Ω–∞ –≤–∑—Ä–æ—Å–ª–∞—è.</b> <b>–í –¥–µ—Ç—Å–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö</b> –ø–æ <b>40 –º–µ—Å—Ç,</b> –∞ <B>–≤–æ –≤–∑—Ä–æ—Å–ª–æ–π 25.</B>\n\n‚Ä¢ –ù–∞ <b><I>–¥–µ—Ç—Å–∫–æ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ</I></b> –Ω–∞—É—á–∏–º—Å—è –≥–æ—Ç–æ–≤–∏—Ç—å <i>–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π</i> <b>–∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç ¬´–¢–∏—Ä–∞–º–∏—Å—É¬ª</b> –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é <b>–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫—Ä–µ–º–∞</b> –∏ <b>–≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–±–æ—Ä–∫–∏ –¥–µ—Å–µ—Ä—Ç–∞.</b>\n\n‚Ä¢ –ù–∞ <b><i>–≤–∑—Ä–æ—Å–ª–æ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ</i></b> –Ω–∞—É—á–∏–º—Å—è –≥–æ—Ç–æ–≤–∏—Ç—å <b><I>–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Å–µ–≥–æ–¥–Ω—è</I> —è–ø–æ–Ω—Å–∫–∏–π –¥–µ—Å–µ—Ä—Ç ¬´–ú–æ—Ç–∏¬ª.</b> –†–∞—Å—Å–º–æ—Ç—Ä–∏–º <b>–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</b> –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è <b>–∑–∞–≤–∞—Ä–Ω–æ–≥–æ —Ä–∏—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞,</b> –∞ —Ç–∞–∫–∂–µ –Ω–∞—É—á–∏–º—Å—è <b>—Ñ–æ—Ä–º–æ–≤–∞—Ç—å ¬´–ú–æ—Ç–∏¬ª.\n\n‚Ä¢ –î–µ—Ç—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã</b> –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ <b>–ø—è—Ç–Ω–∏—Ü—É 29 –º–∞—Ä—Ç–∞ –≤ 15:00 –∏ –≤ 16:30, –≤–∑—Ä–æ—Å–ª–∞—è –≥—Ä—É–ø–ø–∞</b> –ø—Ä–∏—Å—Ç—É–ø–∏—Ç –∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—É <b>–≤ 18:00</b>.\n\n<i>‚ùó–î–∞–ª–µ–µ —Å–ª–µ–¥—É–π—Ç–µ –º–æ–∏–º —É–∫–∞–∑–∞–Ω–∏—è–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ <b>–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞.</b></i>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "–û—Ç–ª–∏—á–Ω–æ! üëç",
										callback_data: "firstMeeting2",
									},
								],
							],
						},
					}
				);
				break;
			case 2:
				dataAboutUser.userAction = "firstMeeting2";
				await bot.editMessageText(
					`<b><i>–≠—Ç–∞–ø 1/3  ‚Ä¢  –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã</i></b> ${
						dataAboutUser.selectedTimeGroup ? "‚úÖ" : ""
					}\n\n–î–∞–≤–∞–π—Ç–µ <b>–æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –≥—Ä—É–ø–ø–æ–π!</b> üòâ\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å–µ–π—á–∞—Å:<blockquote>${
						timeGroups[0].listedUsers.length >=
							timeGroups[0].maxCountOfSeats && timeGroups[0].listedUsers
							? `<u>${timeGroups[0].time} - ${
									timeGroups[0].maxCountOfSeats -
									timeGroups[0].listedUsers.length
							  } / ${
									timeGroups[0].maxCountOfSeats - 1
							  } –º–µ—Å—Ç - –¥–µ—Ç—Å–∫–∞—è</u>`
							: `${timeGroups[0].time} - ${
									timeGroups[0].maxCountOfSeats -
									timeGroups[0].listedUsers.length
							  } / ${timeGroups[0].maxCountOfSeats - 1} –º–µ—Å—Ç - –¥–µ—Ç—Å–∫–∞—è`
					}\n${
						timeGroups[1].listedUsers.length >=
							timeGroups[1].maxCountOfSeats && timeGroups[1].listedUsers
							? `<u>${timeGroups[1].time} - ${
									timeGroups[1].maxCountOfSeats -
									timeGroups[1].listedUsers.length
							  } / ${
									timeGroups[1].maxCountOfSeats - 1
							  } –º–µ—Å—Ç - –¥–µ—Ç—Å–∫–∞—è</u>`
							: `${timeGroups[1].time} - ${
									timeGroups[1].maxCountOfSeats -
									timeGroups[1].listedUsers.length
							  } / ${timeGroups[1].maxCountOfSeats - 1} –º–µ—Å—Ç - –¥–µ—Ç—Å–∫–∞—è`
					}\n${
						timeGroups[2].listedUsers.length >=
							timeGroups[2].maxCountOfSeats && timeGroups[2].listedUsers
							? `<u>${timeGroups[2].time} - ${
									timeGroups[2].maxCountOfSeats -
									timeGroups[2].listedUsers.length
							  } / ${
									timeGroups[2].maxCountOfSeats - 1
							  } –º–µ—Å—Ç - –≤–∑—Ä–æ—Å–ª–∞—è</u>`
							: `${timeGroups[2].time} - ${
									timeGroups[2].maxCountOfSeats -
									timeGroups[2].listedUsers.length
							  } / ${timeGroups[2].maxCountOfSeats - 1} –º–µ—Å—Ç - –≤–∑—Ä–æ—Å–ª–∞—è`
					}</blockquote></b>\n${
						timeGroups[0].listedUsers.length >=
							timeGroups[0].maxCountOfSeats &&
						timeGroups[1].listedUsers.length >=
							timeGroups[1].maxCountOfSeats &&
						timeGroups[2].listedUsers.length >=
							timeGroups[2].maxCountOfSeats
							? "\n<b>–ö –±–æ–ª—å—à–æ–º—É —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –≥—Ä—É–ø–ø—ã —É–∂–µ –ø–µ—Ä–µ–ø–æ–Ω–µ–Ω—ã! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞! ‚òπÔ∏è</b>"
							: `${
									!dataAboutUser.selectedTimeGroup
										? `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ <b>–≥—Ä—É–ø–ø—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏!</b> üòÄ`
										: `\n–í–∞—à–∞ –≥—Ä—É–ø–ø–∞:\n<b>${
												dataAboutUser.selectedTimeGroup == "15:00"
													? "–î–µ—Ç—Å–∫–∞—è"
													: `${
															dataAboutUser.selectedTimeGroup ==
															"16:30"
																? "–î–µ—Ç—Å–∫–∞—è"
																: `${
																		dataAboutUser.selectedTimeGroup ==
																		"18:00"
																			? "–í–∑—Ä–æ—Å–ª–∞—è"
																			: ``
																  }`
													  }`
										  }, –≤ ${
												dataAboutUser.selectedTimeGroup
										  } - 29 –º–∞—Ä—Ç–∞</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å <b>–¥—Ä—É–≥—É—é</b> –≥—Ä—É–ø–ø—É! üòâ`
							  }`
					}`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `${
											timeGroups[0].listedUsers.length <
												timeGroups[0].maxCountOfSeats &&
											timeGroups[0].listedUsers
												? `${
														dataAboutUser.selectedTimeGroup ==
														"15:00"
															? `‚Ä¢ ${
																	timeGroups[0].time
															  } - –æ—Å—Ç–∞–ª–æ—Å—å ${
																	timeGroups[0]
																		.maxCountOfSeats -
																	timeGroups[0].listedUsers
																		.length -
																	1
															  } –º–µ—Å—Ç ‚Ä¢`
															: `${
																	timeGroups[0].time
															  } - –æ—Å—Ç–∞–ª–æ—Å—å ${
																	timeGroups[0]
																		.maxCountOfSeats -
																	timeGroups[0].listedUsers
																		.length
															  } –º–µ—Å—Ç`
												  }`
												: ""
										}`,
										callback_data: "selectGroup1500",
									},
								],
								[
									{
										text: `${
											timeGroups[1].listedUsers.length <
												timeGroups[1].maxCountOfSeats &&
											timeGroups[1].listedUsers
												? `${
														dataAboutUser.selectedTimeGroup ==
														"16:30"
															? `‚Ä¢ ${
																	timeGroups[1].time
															  } - –æ—Å—Ç–∞–ª–æ—Å—å ${
																	timeGroups[1]
																		.maxCountOfSeats -
																	timeGroups[1].listedUsers
																		.length -
																	1
															  } –º–µ—Å—Ç ‚Ä¢`
															: `${
																	timeGroups[1].time
															  } - –æ—Å—Ç–∞–ª–æ—Å—å ${
																	timeGroups[1]
																		.maxCountOfSeats -
																	timeGroups[1].listedUsers
																		.length
															  } –º–µ—Å—Ç`
												  }`
												: ""
										}`,
										callback_data: "selectGroup1630",
									},
								],
								[
									{
										text: `${
											timeGroups[2].listedUsers.length <
												timeGroups[2].maxCountOfSeats &&
											timeGroups[2].listedUsers
												? `${
														dataAboutUser.selectedTimeGroup ==
														"18:00"
															? `‚Ä¢ ${
																	timeGroups[2].time
															  } - –æ—Å—Ç–∞–ª–æ—Å—å ${
																	timeGroups[2]
																		.maxCountOfSeats -
																	timeGroups[2].listedUsers
																		.length -
																	1
															  } –º–µ—Å—Ç ‚Ä¢`
															: `${
																	timeGroups[2].time
															  } - –æ—Å—Ç–∞–ª–æ—Å—å ${
																	timeGroups[2]
																		.maxCountOfSeats -
																	timeGroups[2].listedUsers
																		.length
															  } –º–µ—Å—Ç`
												  }`
												: ""
										}`,
										callback_data: "selectGroup1800",
									},
								],
								// [
								// 	{
								// 		text: `${
								// 			!timeGroups[0].listedUsers.length <
								// 				timeGroups[0].maxCountOfSeats &&
								// 			!timeGroups[1].listedUsers.length <
								// 				timeGroups[1].maxCountOfSeats &&
								// 			!timeGroups[2].listedUsers.length <
								// 				timeGroups[2].maxCountOfSeats
								// 				? "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"
								// 				: ""
								// 		}`,
								// 		url: "",
								// 	},
								// ],
								[
									{
										text: `‚¨ÖÔ∏è–ù–∞–∑–∞–¥`,
										callback_data: "firstMeeting1",
									},
									{
										text: `${
											dataAboutUser.selectedTimeGroup
												? "–í—ã–±—Ä–∞—Ç—å‚úÖ"
												: ""
										}`,
										callback_data: "firstMeeting3",
									},
								],
							],
						},
					}
				);
				break;

			case 3:
				dataAboutUser.userAction = "firstMeeting3";
				try {
					bot.deleteMessage(chatId, dataAboutUser.otherMessageId);
				} catch (error) {}

				await bot.editMessageText(
					`<b><i>–≠—Ç–∞–ø 2/3  ‚Ä¢  –ü–æ–ª–Ω–æ–µ –§–ò–û</i></b> ${
						dataAboutUser.fullName == "" ? "" : "‚úÖ"
					}\n\n–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ <b>–∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!</b> üëãüòâ\n\n${
						dataAboutUser.fullName == ""
							? "<b>–ü—Ä–∏–º–µ—Ä (–§–ò–û)</b>:\n<code>–ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á</code>\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ <b>—Å–≤–æ—ë –ø–æ–ª–Ω–æ–µ –§–ò–û!</b> üòÄ"
							: `<b>–£–∫–∞–∑–∞–Ω–æ–µ –§–ò–û:</b>\n<code>${dataAboutUser.fullName}</code>\n\n–ù–∞–ø–∏—à–∏—Ç–µ <b>–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ</b> –¥–∞–Ω–Ω—ã–µ! ü§î`
					}‚úçÔ∏è`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `${
											dataAboutUser.selectedTimeGroup
												? "‚¨ÖÔ∏è–ù–∞–∑–∞–¥"
												: ""
										}`,
										callback_data: "firstMeeting2",
									},
									{
										text: `${
											dataAboutUser.fullName ? "–í–ø–µ—Ä–µ–¥‚û°Ô∏è" : ""
										}`,
										callback_data: "firstMeeting4",
									},
								],
							],
						},
					}
				);
				break;
			case 4:
				dataAboutUser.userAction = "firstMeeting4";

				bot.editMessageText(
					`<b><i>–≠—Ç–∞–ø 3/3  ‚Ä¢  –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i></b> ${
						dataAboutUser.phoneNumber == "" ? "" : "‚úÖ"
					}\n\n<b>–û—Ç–ª–∏—á–Ω–æ!</b>üëå\n–¢–µ–ø–µ—Ä—å –º—ã –Ω–µ <b><i>—á—É–∂–∏–µ –ª—é–¥–∏!</i></b> üòÅ\n\n${
						dataAboutUser.phoneNumber == ""
							? "<b>–ü—Ä–∏–º–µ—Ä</b>:\n<code>+79333333333</code>\n\n–°–µ–π—á–∞—Å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b> üòä"
							: `<b>–í–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:</b>\n<code>${dataAboutUser.phoneNumber}</code>\n\n–í–ø–∏—à–∏—Ç–µ <b>–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π</b> –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! üßê`
					}‚úçÔ∏è`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: `${
											dataAboutUser.fullName ? "‚¨ÖÔ∏è–ù–∞–∑–∞–¥" : ""
										}`,
										callback_data: "firstMeeting3",
									},
									{
										text: `${
											dataAboutUser.phoneNumber ? "–í–ø–µ—Ä–µ–¥‚û°Ô∏è" : ""
										}`,
										callback_data: "firstMeeting5",
									},
								],
							],
						},
					}
				);

				await bot
					.sendMessage(
						chatId,
						`–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>—É–¥–æ–±–Ω–æ–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ</b> –∫–æ–Ω—Ç–∞–∫—Ç–∞ ‚¨áÔ∏è`,
						{
							parse_mode: "HTML",
							disable_web_page_preview: true,
							reply_markup: {
								keyboard: [
									[
										{
											text: "–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–º–µ—Ä",
											request_contact: true,
											resize_keyboard: true,
										},
									],
								],
							},
						}
					)
					.then((message) => {
						dataAboutUser.otherMessageId = message.message_id;
					});

				break;
			case 5:
				try {
					bot.deleteMessage(chatId, dataAboutUser.otherMessageId);
				} catch (error) {}
				dataAboutUser.userAction = "-";
				await bot.editMessageText(
					`<b>‚ùó–í–ù–ò–ú–ê–ù–ò–ï‚ùó</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ <i><b>–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö,</b></i> –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º, <b>—É –≤–∞—Å –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!\n\n‚Ä¢ –ì—Ä—É–ø–ø–∞:  <code>${
						dataAboutUser.selectedTimeGroup == "15:00"
							? "–î–µ—Ç—Å–∫–∞—è"
							: `${
									dataAboutUser.selectedTimeGroup == "16:30"
										? "–î–µ—Ç—Å–∫–∞—è"
										: `${
												dataAboutUser.selectedTimeGroup == "18:00"
													? "–í–∑—Ä–æ—Å–ª–∞—è"
													: ``
										  }`
							  }`
					}, –≤ ${
						dataAboutUser.selectedTimeGroup
					}</code>\n‚Ä¢ –í–∞—à–µ –§–ò–û:  <code>${
						dataAboutUser.fullName
					}</code>\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω:  <code>${
						dataAboutUser.phoneNumber
					}</code>\n\n–ï—Å—Ç—å –æ—à–∏–±–∫–∏? ‚ùå\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å</b> –∏ <b>–∏–∑–º–µ–Ω–∏—Ç–µ</b> –¥–∞–Ω–Ω—ã–µ!üëå`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: "‚¨ÖÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å",
										callback_data: "firstMeeting4",
									},
									{
										text: "–í—Å–µ –≤–µ—Ä–Ω–æ‚úÖ",
										callback_data: "firstMeeting6",
									},
								],
							],
						},
					}
				);
				break;
			case 6:
				dataAboutUser.registrationIsOver = true;
				if (
					!timeGroups[0].listedUsers.find((obj) => obj == chatId) &&
					!timeGroups[1].listedUsers.find((obj) => obj == chatId) &&
					!timeGroups[2].listedUsers.find((obj) => obj == chatId) &&
					chatId != qu1z3xId &&
					chatId != stepanovId
				) {
					switch (dataAboutUser.selectedTimeGroup) {
						case "15:00":
							timeGroups[0].listedUsers.push(chatId.toString());
							break;
						case "16:30":
							timeGroups[1].listedUsers.push(chatId.toString());
							break;
						case "18:00":
							timeGroups[2].listedUsers.push(chatId.toString());
							break;
					}
				}

				try {
					dataAboutUser.userAction = "-";
					await bot.editMessageText(
						`<b>–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üëç</b>\n<b>–ñ–¥–µ–º –≤–∞—Å –≤ ${dataAboutUser.selectedTimeGroup} - 29 –º–∞—Ä—Ç–∞!</b>\n\n<i>‚Ä¢ –ù–µ —É–¥–∞–ª—è–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—à —Å –≤–∞–º–∏ —á–∞—Ç, —è –≤–æ–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ —Å–æ–±—ã—Ç–∏–∏, —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –º–µ—Å—Ç–∞, –∏ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–ø—Ä–æ—à—É —Å –≤–∞—Å –æ—Ç–∑—ã–≤! üòä</i>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞ ü™™",
											callback_data: "myForm",
										},
									],
									[
										{
											text: `${
												chatId == qu1z3xId || chatId == stepanovId
													? `üí†–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µüí†`
													: ""
											}`,
											callback_data: "adminMenu",
										},
									],
								],
							},
						}
					);
				} catch (error) {
					await bot.sendMessage(
						chatId,
						`<b>–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üëç</b>\n<b>–ñ–¥–µ–º –≤–∞—Å –≤ ${dataAboutUser.selectedTimeGroup} - 29 –º–∞—Ä—Ç–∞!</b>\n\n<i>‚Ä¢ –ù–µ —É–¥–∞–ª—è–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—à —Å –≤–∞–º–∏ —á–∞—Ç, —è –≤–æ–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ —Å–æ–±—ã—Ç–∏–∏, —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –º–µ—Å—Ç–∞, –∏ –ø–æ—Å–ª–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å–ø—Ä–æ—à—É —Å –≤–∞—Å –æ—Ç–∑—ã–≤! üòä</i>`,
						{
							parse_mode: "HTML",
							disable_web_page_preview: true,
							disable_web_page_preview: true,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞ ü™™",
											callback_data: "myForm",
										},
									],
									[
										{
											text: `${
												chatId == qu1z3xId || chatId == stepanovId
													? `üí†–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µüí†`
													: ""
											}`,
											callback_data: "adminMenu",
										},
									],
								],
							},
						}
					);
					console.log(error);
					sendDataAboutError(chatId, `${String(error)}`);
				}

				if (TOKEN == TOKENs[1]) {
					set(dataRef, {
						culinarUsersData: usersData,
						masterClassFeedbacks: masterClassFeedbacks,
						timeGroups: timeGroups,
					});
				}
				console.log(timeGroups);
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, `${String(error)}`);
	}
}

async function myForm(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
	try {
		await bot.editMessageText(
			`<b><i>üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞ ü™™</i>\n\n‚Ä¢ –í–∞—à–µ –§–ò–û:  <code>${
				dataAboutUser.fullName
			}</code>\n‚Ä¢ –ì—Ä—É–ø–ø–∞:  <code>${
				dataAboutUser.selectedTimeGroup == "15:00"
					? "–î–µ—Ç—Å–∫–∞—è"
					: `${
							dataAboutUser.selectedTimeGroup == "16:30"
								? "–î–µ—Ç—Å–∫–∞—è"
								: `${
										dataAboutUser.selectedTimeGroup == "18:00"
											? "–í–∑—Ä–æ—Å–ª–∞—è"
											: ``
								  }`
					  }`
			}, –≤ ${dataAboutUser.selectedTimeGroup}</code>\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω:  <code>${
				dataAboutUser.phoneNumber
			}</code>\n\n${
				masterClassFeedbacks.find((obj) => obj.chatId == chatId)
					? "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! üôè"
					: "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è! üòä"
			}</b>`,
			{
				parse_mode: "html",
				chat_id: chatId,
				message_id: usersData.find((obj) => obj.chatId == chatId).messageId,
				disable_web_page_preview: true,
				reply_markup: {
					inline_keyboard: [
						[
							{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "firstMeeting6" },
							{ text: "–û—Ç–∑—ã–≤ üìß", callback_data: "addFeedback" },
						],
					],
				},
			}
		);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, `${String(error)}`);
	}
}

async function addFeedback(chatId, numberOfStage = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		switch (numberOfStage) {
			case 1:
				dataAboutUser.userAction = "addFeedback1";
				await bot.editMessageText(
					`<b><i>‚úçÔ∏è –û—Ç–∑—ã–≤ üìß</i>\n\n–ï—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è? –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∏—Ö –Ω–∞–º! üòâ\n\n–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å! ‚úçÔ∏èüòÜ</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥ ", callback_data: "myForm" }],
							],
						},
					}
				);

				break;
			case 2:
				dataAboutUser.userAction = "addFeedback2";
				await bot.editMessageText(
					`<b><i>‚úçÔ∏è –û—Ç–∑—ã–≤ üìß</i>\n\n–ú—ã —É—á—Ç–µ–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòÄ\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üòâ‚ù§Ô∏è</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						disable_web_page_preview: true,
						reply_markup: {
							inline_keyboard: [
								[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "myForm" }],
							],
						},
					}
				);
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, `${String(error)}`);
	}
}

async function adminMenu(chatId) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	if (chatId == qu1z3xId || chatId == stepanovId) {
		try {
			dataAboutUser.userAction = "-";

			await bot.editMessageText(
				`<i><b>üí†–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—èüí†\n\n</b>‚ùó–ê–ª–µ—Ä—Ç—ã —Ä–∞—Å—Å—ã–ª–∞—é—Ç—Å—è –æ—Ç –≤–∞—à–∏—Ö —Ä—É–∫! üòâ </i>`,
				{
					parse_mode: "html",
					chat_id: chatId,
					message_id: usersData.find((obj) => obj.chatId == chatId)
						.messageId,
					disable_web_page_preview: true,
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: "–ê–ª–µ—Ä—Ç—ã üì£",
									callback_data: "adminMenuSendMessage1",
								},
							],
							[
								{ text: "–†–µ–µ—Å—Ç—Ä üíæ", callback_data: "dataList1" },
								{ text: "–û—Ç–∑—ã–≤—ã üìß", callback_data: "dataList2" },
							],
							[
								{
									text: "ü™™ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üë§",
									callback_data: "firstMeeting1",
								},
							],
						],
					},
				}
			);
		} catch (error) {
			console.log(error);
			sendDataAboutError(chatId, `${String(error)}`);
		}
	}
}

async function dataLists(chatId, listNum = 1) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	let text = ["", "", ""];
	let a = 0,
		b = 0,
		c = 0;

	try {
		switch (listNum) {
			case 1:
				for (let i = 0; i < usersData.length; i++) {
					if (
						usersData[i].registrationIsOver &&
						usersData[i].selectedTimeGroup == "15:00"
					) {
						text[0] += `[${a + 1}] <code>${
							usersData[i].fullName
						}</code>\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω:  <code>${
							usersData[i].phoneNumber
						}</code>\n\n`;
						a++;
					} else if (
						usersData[i].registrationIsOver &&
						usersData[i].selectedTimeGroup == "16:30"
					) {
						text[1] += `[${b + 1}] <code>${
							usersData[i].fullName
						}</code>\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω:  <code>${
							usersData[i].phoneNumber
						}</code>\n\n`;
						b++;
					} else if (
						usersData[i].registrationIsOver &&
						usersData[i].selectedTimeGroup == "18:00"
					) {
						text[2] += `[${c + 1}] <code>${
							usersData[i].fullName
						}</code>\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω:  <code>${
							usersData[i].phoneNumber
						}</code>\n\n`;
						c++;
					}
				}

				bot.editMessageText(
					`<b><i>üë®‚Äçüç≥ –£—á–∞—Å—Ç–Ω–∏–∫–∏ ü•≥</i>\n\n${
						a + b + c > 0
							? `–ö–ª–∏–∫–æ–º –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–Ω—Ñ–∞‚ùó\n\n<i>üî¥ –î–µ—Ç—Å–∫–∞—è –≤ 15:00:\n\n${
									text[0] || "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π\n\n"
							  }üî¥ –î–µ—Ç—Å–∫–∞—è –≤ 16:30:\n\n${
									text[1] || "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π\n\n"
							  }üî¥ –í–∑—Ä–æ—Å–ª–∞—è –≤ 18:00:\n\n${
									text[2] || "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π\n\n"
							  }</i>–í—Å–µ–≥–æ: ${a + b + c}`
							: "–ü–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ üèùÔ∏è"
					}</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId === chatId)
							.messageId,
						reply_markup: {
							inline_keyboard: [
								[
									{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
									{
										text: "–û–±–Ω–æ–≤–∏—Ç—åüîÑÔ∏è",
										callback_data: "dataList1",
									},
								],
							],
						},
					}
				);
				break;
			case 2:
				for (let i = 0; i < masterClassFeedbacks.length; i++) {
					let user = usersData.find(
						(obj) => obj.chatId === masterClassFeedbacks[i].chatId
					);

					if (
						masterClassFeedbacks[i].text &&
						user.selectedTimeGroup == "15:00"
					) {
						text[0] += `[${a + 1}] <code>${
							user.fullName
						}</code>\n‚Ä¢ <code>${user.phoneNumber}</code>\n"${
							masterClassFeedbacks[i].text
						}"\n\n`;
						a++;
					} else if (
						masterClassFeedbacks[i].text &&
						user.selectedTimeGroup == "16:30"
					) {
						text[1] += `[${b + 1}] <code>${
							user.fullName
						}</code>\n‚Ä¢ <code>${user.phoneNumber}</code>\n"${
							masterClassFeedbacks[i].text
						}"\n\n`;
						b++;
					} else if (
						masterClassFeedbacks[i].text &&
						user.selectedTimeGroup == "18:00"
					) {
						text[2] += `[${c + 1}] <code>${
							user.fullName
						}</code>\n‚Ä¢ <code>${user.phoneNumber}</code>\n"${
							masterClassFeedbacks[i].text
						}"\n\n`;
						c++;
					}
				}

				bot.editMessageText(
					`<b><i>üë®‚Äçüç≥ –û—Ç–∑—ã–≤—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üì© </i>\n\n${
						a + b + c > 0
							? `–ö–ª–∏–∫–æ–º –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–Ω—Ñ–∞‚ùó\n\n<i>üî¥ –î–µ—Ç—Å–∫–∞—è –≤ 15:00:\n\n${
									text[0] || "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n\n"
							  }üî¥ –î–µ—Ç—Å–∫–∞—è –≤ 16:30:\n\n${
									text[1] || "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n\n"
							  }üî¥ –í–∑—Ä–æ—Å–ª–∞—è –≤ 18:00:\n\n${
									text[2] || "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n\n"
							  }</i>–í—Å–µ–≥–æ: ${a + b + c}`
							: "–ü–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ üèùÔ∏è"
					}</b>`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId === chatId)
							.messageId,
						reply_markup: {
							inline_keyboard: [
								[
									{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
									{
										text: "–û–±–Ω–æ–≤–∏—Ç—åüîÑÔ∏è",
										callback_data: "dataList2",
									},
								],
							],
						},
					}
				);
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, `${String(error)}`);
	}
}

async function adminMenuSendMessage(chatId, numberOfStage) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	try {
		switch (numberOfStage) {
			case 1:
				dataAboutUser.userAction = "adminMenuSendMessage1";

				await bot.editMessageText(
					"<b><i>üìã –ê–ª–µ—Ä—Ç—ã üì£ \n\n‚ùó–í–ù–ò–ú–ê–ù–ò–ï‚ùó</i>\n\n–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n–ù–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∏–∂–µ! ‚úçÔ∏è</b>",
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						reply_markup: {
							inline_keyboard: [
								[{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" }],
							],
						},
					}
				);
				break;
			case 2:
				dataAboutUser.userAction = "-";
				await bot.editMessageText(
					`<b><i>üìã –ê–ª–µ—Ä—Ç—ã üì£</i>\n\n</b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ <b>—É—Å–ø–µ—à–Ω–æ</b> –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ! üòâ‚úÖ`,
					{
						parse_mode: "html",
						chat_id: chatId,
						message_id: usersData.find((obj) => obj.chatId == chatId)
							.messageId,
						reply_markup: {
							inline_keyboard: [
								[
									{ text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data: "adminMenu" },
									{
										text: "–°–æ–∑–¥–∞—Ç—å –µ—à–µ ‚ûï",
										callback_data: "adminMenuSendMessage1",
									},
								],
							],
						},
					}
				);
				for (let i = 0; i < usersData.length; i++) {
					if (usersData[i].chatId != stepanovId) {
						bot.sendMessage(
							usersData[i].chatId,
							`<b><i>–û–±—å—è–≤–ª–µ–Ω–∏–µ üì£</i>\n\n${textMessageForAllUsers}</b>`,
							{
								parse_mode: "html",
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: "–£–¥–∞–ª–∏—Ç—å ‚ùå",
												callback_data: "deleteexcess",
											},
											{
												text: "–°–ø–∞—Å–∏–±–æ üëç",
												callback_data: "deleteexcess",
											},
										],
									],
								},
							}
						);
					}
				}
				break;
		}
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, `${String(error)}`);
	}
}

async function start(chatId, quickStart = false) {
	const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

	let textToSayHello = "";
	const dateNowHHNN = new Date().getHours() * 100 + new Date().getMinutes();
	if (dateNowHHNN < 1200 && dateNowHHNN >= 600) textToSayHello = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ";
	else if (dateNowHHNN < 1700 && dateNowHHNN >= 1200)
		textToSayHello = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å";
	else if (dateNowHHNN < 2200 && dateNowHHNN >= 1700)
		textToSayHello = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä";
	else if (dateNowHHNN >= 2200 || dateNowHHNN < 600)
		textToSayHello = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏";

	try {
		await bot
			.sendMessage(
				chatId,
				`<b>${textToSayHello}, ${dataAboutUser.firstName}! üëã</b>`,
				{
					parse_mode: "HTML",
					disable_web_page_preview: true,
				}
			)
			.then((message) => {
				dataAboutUser.messageId = message.message_id;
			});

		await bot.sendMessage(chatId, `„Ö§`, {}).then((message) => {
			dataAboutUser.messageId = message.message_id;
		});

		if (!quickStart) firstMeeting(chatId);
		else if (quickStart) adminMenu(chatId);
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, `${String(error)}`);
	}
}

async function StartAll() {
	if (TOKEN == TOKENs[0]) {
		BotName = "digsch27_bot";
	} else if (TOKEN == TOKENs[1]) {
		BotName = "sch27masterclass";

		get(dataRef).then((snapshot) => {
			if (snapshot.exists()) {
				const dataFromDB = snapshot.val();
				usersData = dataFromDB.culinarUsersData || [];
				masterClassFeedbacks = dataFromDB.masterClassFeedbacks || [];
				timeGroups = dataFromDB.timeGroups || [];
			}
		});
	}

	try {
		bot.on("contact", (message) => {
			const chatId = message.chat.id; // –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º chatId
			const dataAboutUser = usersData.find((obj) => obj.chatId == chatId); // –ó–∞—Ç–µ–º –Ω–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
			if (dataAboutUser && dataAboutUser.userAction == "firstMeeting4") {
				dataAboutUser.phoneNumber = message.contact.phone_number;
				firstMeeting(chatId, 5);
				console.log(333);
			}
		});

		bot.on("message", async (message) => {
			const chatId = message.chat.id;
			const text = message.text;
			let dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

			try {
				if (!dataAboutUser) {
					usersData.push({
						chatId: message.chat.id,
						messageId: "",
						otherMessageId: "",
						userName: message.from.username,
						firstName: message.from.first_name,
						userAction: "",
						selectedTimeGroup: "",
						fullName: "",
						phoneNumber: "",
						registrationIsOver: false,
					});
				}

				if (usersData.find((obj) => obj.chatId == chatId)) {
					dataAboutUser = usersData.find((obj) => obj.chatId == chatId);
					//? –ö–û–ú–ê–ù–î–´
					switch (text) {
						case "/start":
						case "/restart":
							if (chatId == qu1z3xId || chatId == stepanovId) {
								start(chatId, true);
							} else {
								if (!dataAboutUser.registrationIsOver) {
									start(chatId);
								} else firstMeeting(chatId, 6);
							}
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;

						default:
							break;
					}
				}

				if (dataAboutUser && dataAboutUser.userAction == "addFeedback1") {
					masterClassFeedbacks.push({
						chatId: chatId,
						text: text,
					});
					addFeedback(chatId, 2);
				}

				if (
					(chatId == qu1z3xId || chatId == stepanovId) &&
					dataAboutUser &&
					dataAboutUser.userAction == "adminMenuSendMessage1"
				) {
					textMessageForAllUsers = text;
					await bot.editMessageText(
						`<b><i>üìã –ê–ª–µ—Ä—Ç—ã üì£</i>\n\n‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:<blockquote><i>–û–±—å—è–≤–ª–µ–Ω–∏–µ üì£</i>\n\n${textMessageForAllUsers}</blockquote></b>`,
						{
							parse_mode: "html",
							chat_id: chatId,
							message_id: usersData.find((obj) => obj.chatId == chatId)
								.messageId,
							reply_markup: {
								inline_keyboard: [
									[
										{
											text: "‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
											callback_data: "adminMenuSendMessage1",
										},
										{
											text: "–°–æ–∑–¥–∞—Ç—å ‚úÖ",
											callback_data: "adminMenuSendMessage2",
										},
									],
								],
							},
						}
					);
				}
				if (
					dataAboutUser &&
					dataAboutUser.userAction == "firstMeeting3" &&
					text.match(/\s/g) &&
					!/\d/.test(text)
				) {
					dataAboutUser.fullName = text;
					firstMeeting(chatId, 4);
					console.log(1);
				}

				bot.deleteMessage(chatId, message.message_id);
			} catch (error) {
				console.log(error);
				sendDataAboutError(chatId, `${String(error)}`);
			}
		});

		//? –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ê–í–ò–ê–¢–£–†–´ –ü–û–î –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò

		bot.on("callback_query", (query) => {
			const chatId = query.message.chat.id;
			const data = query.data;

			const dataAboutUser = usersData.find((obj) => obj.chatId == chatId);

			try {
				// if (!dataAboutUser) {
				// 	usersData.push({
				// 		chatId: message.chat.id,
				// 		messageId: "",
				// 		userName: message.from.username,
				// 		firstName: message.from.first_name,
				// 		userAction: "",
				// 		selectedTimeGroup: [],
				// 	});
				// }
				if (usersData.find((obj) => obj.chatId == chatId)) {
					if (data.includes("firstMeeting")) {
						let numberOfStage = data.match(/^firstMeeting(\d+)$/);
						numberOfStage = parseInt(numberOfStage[1]);

						firstMeeting(chatId, numberOfStage);
					}

					if (data.includes("dataList")) {
						let listNum = data.match(/^dataList(\d+)$/);
						listNum = parseInt(listNum[1]);

						dataLists(chatId, listNum);
					}

					if (data.includes("adminMenuSendMessage")) {
						let numberOfStage = data.match(/^adminMenuSendMessage(\d+)$/);
						numberOfStage = parseInt(numberOfStage[1]);

						adminMenuSendMessage(chatId, numberOfStage);
					}

					if (data.includes("selectGroup")) {
						let numberOfGroup = data.match(/^selectGroup(\d+)$/);
						numberOfGroup = parseInt(numberOfGroup[1]);
						if (dataAboutUser.userAction == "firstMeeting2") {
							switch (numberOfGroup) {
								case 1500:
									dataAboutUser.selectedTimeGroup = "15:00";
									break;
								case 1630:
									dataAboutUser.selectedTimeGroup = "16:30";
									break;
								case 1800:
									dataAboutUser.selectedTimeGroup = "18:00";
									break;
							}
							firstMeeting(chatId, 2);
						}
					}

					//? –ö–û–ú–ê–ù–î–´
					switch (data) {
						case "":
							break;
						case "myForm":
							myForm(chatId);
							break;
						case "adminMenu":
							adminMenu(chatId);
							break;
						case "deleteexcess":
							try {
								bot.deleteMessage(chatId, query.message.message_id);
							} catch (error) {
								console.log(error);
								sendDataAboutError(chatId, `${String(error)}`);
							}
							break;
						case "addFeedback":
							addFeedback(chatId);
							break;
						case "":
							break;
						case "":
							break;
						case "":
							break;

						default:
							break;
					}
				}
			} catch (error) {
				console.log(error);
				sendDataAboutError(chatId, `${String(error)}`);
			}
		});
	} catch (error) {
		console.log(error);
		sendDataAboutError(chatId, `${String(error)}`);
	}
}

StartAll();
